{"version":3,"sources":["theme.ts","components/Navigation.tsx","components/Checkbox.tsx","components/EmailList.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","fonts","body","fontWeight","bold","breakpoints","fontSizes","colors","background","primary","secondary","hover","work","travel","space","text","default","fontFamily","fontSize","list","new","listDecoration","read","buttons","color","bg","cursor","width","outline","styles","root","forms","checkbox","Navigation","messages","data","useState","uniqueTags","setUniqueTags","useEffect","allTags","forEach","tags","tag","push","uniqueValues","Set","p","sx","padding","margin","listStyle","textAlign","variant","map","key","uuidv4","toLowerCase","Checkbox","checked","onChange","EmailList","emailData","setEmailData","useReducer","state","action","type","currentCheckedState","payload","checkedItems","dispatchSetCheckedItems","id","onClick","prefilteredData","checkedItem","filter","subject","sender","date","boxShadow","alignItems","flex","columns","justifyItems","wordBreak","dangerouslySetInnerHTML","__html","replace","display","whiteSpace","overflow","textOverflow","mr","Moment","format","Home","showNavigation","setShowNavigation","flexDirection","App","path","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48f4248c.chunk.js","sourcesContent":["const theme = {\n  fonts: {\n    body: \"Roboto,Helvetica,sans-serif\",\n  },\n  fontWeight: {\n    body: \"normal\",\n    bold: 700,\n  },\n  breakpoints: [\n    '640px', '768px',\n  ],\n  fontSizes: [12, 14],\n  colors: {\n    background: \"#fff\",\n    primary: \"#202124\",\n    secondary: \"#5f6368\",\n    hover: \"#e8eaed\",\n    //define tab colors here:\n    work: 'green',\n    travel: 'blue'\n  },\n  space: [5, 10, 14],\n  text: {\n    default: {\n      fontFamily: \"body\",\n      fontSize: 1,\n    },\n    list: {\n      new: {\n        listDecoration: \"none\",\n        fontWeight: \"bold\",\n        fontSize: 1,\n      },\n      read: {\n        fontSize: 1,\n      },\n    },\n  },\n  buttons: {\n    primary: {\n      color: \"primary\",\n      bg: \"background\",\n      \"&:hover\": {\n        bg: \"hover\",\n        cursor: \"pointer\"\n      },\n      width: '100%',\n      outline: 0,\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: \"body\",\n      fontWeight: \"body\",\n    },\n  },\n  forms: {\n    primary: {\n      color: \"#313131\",\n      fontWeight: 600,\n    },\n    checkbox: {\n      color: \"secondary\",\n    },\n  },\n};\n\nexport default theme;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React, { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Box, Text, Badge, Button } from \"theme-ui\";\n\ntype Messages = {\n  id: string;\n  subject: string;\n  sender: string;\n  body: string;\n  tags: string[];\n  date: string;\n};\n\nexport interface NavigationProps {\n  data: {\n    messages: Messages[];\n  };\n}\n\nconst Navigation: React.FC<NavigationProps> = ({ data: { messages }}) => {\n  const [uniqueTags, setUniqueTags] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (uniqueTags && messages) {\n      const allTags:string[] = [];\n      messages.forEach(({ tags }) => {\n        tags.forEach((tag) => {\n          allTags.push(tag);\n      })\n    });\n    const uniqueValues = [...new Set(allTags)];\n    setUniqueTags(uniqueValues);\n  }\n  }, [messages]);\n\n\n  return (\n  <Box\n    p={4}\n    bg='white'>\n    <ul\n        sx={{\n          padding: 0,\n          margin: 0,\n          '& > li': {\n            listStyle: \"none\",\n            textAlign: 'center'\n          }\n        }}\n      >\n          <li>\n            <Button variant='primary'>Inbox</Button>\n          </li>\n          <li>\n            <Button variant='primary'>Trash</Button>\n          </li>\n          <li\n            sx={{\n              margin: '0'\n            }}\n          >\n            <Text>Tags:</Text>\n            <ul>\n              {\n                uniqueTags && uniqueTags.map(tag => (\n                  <li key={uuidv4()}>\n                    <Badge bg={`${tag.toLowerCase()}`}>{tag}</Badge>\n                  </li>\n                ))\n              }\n            </ul>\n          </li>\n      </ul>\n  </Box>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nimport { Label, Checkbox as CheckboxComponent } from \"theme-ui\";\n\nexport interface CheckboxProps {\n  checked: boolean;\n  onChange: () => void;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({ checked, onChange }) => {\n  return (\n    <Label>\n      <CheckboxComponent \n        checked={checked} \n        onChange={onChange} \n      />\n    </Label>\n  );\n};\n\nexport default Checkbox;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React, { useReducer, useEffect, useState } from \"react\";\nimport Moment from \"moment\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Grid, Flex, Text, Badge, Button } from \"theme-ui\";\nimport Checkbox from \"./Checkbox\";\n\ntype Messages = {\n  id: string;\n  subject: string;\n  sender: string;\n  body: string;\n  tags: string[];\n  date: string;\n};\n\nexport interface EmailListProps {\n  data: {\n    messages: Messages[];\n  };\n}\n\nconst EmailList: React.FC<EmailListProps> = ({ data: { messages } }) => {\n\n  interface State {\n    [key: string]: boolean;\n  }\n\n  interface Action {\n    payload: string;\n    type: string;\n  }\n\n  const checkedItemsReducer = (state: State, action: Action)=> {\n    switch (action.type) {\n      case \"toggle\":\n        const currentCheckedState = state[action.payload];\n        return { ...state, [action.payload]: !currentCheckedState };\n      case \"create\":\n        return { ...state, [action.payload]: false };\n      // TODO:  Support ability to check/uncheck all items\n      case \"checkAll\":\n        return { ...state };\n      case \"uncheckAll\":\n        return { ...state };\n      default:\n        return { ...state };\n    }\n  };\n\n  const [ emailData, setEmailData] = useState<Messages[] | null>(null);\n\n  const [checkedItems, dispatchSetCheckedItems] = useReducer(\n    checkedItemsReducer,\n    {}\n  );\n\n  useEffect(() => {\n    setEmailData(messages);\n  }, [messages])\n\n  useEffect(\n    () => {\n      if (emailData) {\n        emailData.forEach(\n          ({ id }) => dispatchSetCheckedItems({ type: \"create\", payload: id })\n        )\n      }\n    },\n    [emailData]\n  );\n\n  return (\n    <div>\n    <Button \n      onClick={() => {\n        let prefilteredData = emailData;\n        for (const checkedItem in checkedItems) {\n          if (checkedItems[checkedItem] && prefilteredData) {\n            prefilteredData = prefilteredData.filter(({id}) => checkedItem !== id);\n          }\n        }\n      setEmailData(prefilteredData);\n      }}>\n      Delete\n    </Button>\n    <ul\n      sx={{\n        padding: 0,\n      }}\n    >\n      {emailData && emailData.map(({ id, subject, sender, body, tags, date }) => (\n        <li\n          key={id}\n          sx={{\n            boxShadow: \"inset 0 -1px 0 0 rgba(100,121,143,0.122)\",\n            listStyle: \"none\",\n          }}\n        >\n          <Flex\n            sx={{\n              alignItems: 'center'\n            }}\n          >\n            <div\n              sx={{\n                flex: 1,\n              }}\n            >\n              <Checkbox\n                checked={checkedItems[id]}\n                onChange={() =>\n                  dispatchSetCheckedItems({ type: \"toggle\", payload: id })\n                }\n              />\n            </div>\n            <Grid\n              columns={[1, 4]}\n              sx={{\n                flex: [\"1 1 370px\", \"1 1 590px\"],\n                justifyItems: \"left\",\n              }}\n            >\n              <Text \n              variant=\"list.new\"\n              sx={{\n                wordBreak: 'break-word'\n              }}\n              >{sender}</Text>\n              <Text variant=\"list.new\">{subject}</Text>\n              <Text\n                variant=\"list.new\"\n                dangerouslySetInnerHTML={{\n                  __html: body.replace(\"</p><p>\", \"\"),\n                }}\n                sx={{\n                  display: \"inline-block\",\n                  whiteSpace: \"nowrap\",\n                  width: \"100%\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  \"& > p\": {\n                    margin: \"1px\",\n                  },\n                }}\n              ></Text>\n              <div\n                sx={{\n                  flex: 1,\n\n                }}\n              >\n                {tags.map((tag) => {\n                  return (\n                      <Badge\n                        mr={0}\n                        bg={`${tag.toLowerCase()}`}\n                        key={uuidv4()}\n                      >\n                        {tag}\n                      </Badge>\n                  );\n                })}\n              </div>\n            </Grid>\n            <Text\n              variant=\"list.new\"\n              sx={{\n                flex: 1,\n              }}\n              mr={0}\n            >\n              {Moment(date).format(\"MMM D\")}\n            </Text>\n          </Flex>\n        </li>\n      ))}\n    </ul>\n    </div>\n  );\n};\n\nexport default EmailList;\n","/** @jsx jsx */\nimport { jsx, Flex } from \"theme-ui\";\n\nimport React, { useState } from \"react\";\n\nimport Navigation from '../components/Navigation';\nimport EmailList from '../components/EmailList';\nimport { MenuButton } from \"theme-ui\";\n\nimport data from '../data/emails.json';\n\nconst Home: React.FC<{}> = () => {\n  const [showNavigation, setShowNavigation] = useState(false);\n\n  return (\n    <Flex\n      sx={{\n        flexDirection: 'column'\n      }}\n    >\n      <MenuButton\n      sx={{\n        width: '55px'\n      }}\n        onClick={() => setShowNavigation(!showNavigation)}\n      />\n      <Flex>\n      {\n          showNavigation && (\n            <div\n              sx={{\n                flex:0\n              }}\n            >\n              <Navigation \n                data={data}\n              />\n            </div>\n          )\n      }\n\n      <div\n        sx={{\n          flex:1\n        }}\n      >\n      <EmailList \n      data={data}\n      sx={{\n        flex:1\n      }}\n      />\n      </div>\n    </Flex>\n  </Flex>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { ThemeProvider } from \"theme-ui\";\nimport theme from \"./theme\";\n\nimport Home from \"./pages/Home\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/\" children={<Home />} />\n            {/* <Route path=\"/:mail-id\" children={<Message />} /> */}\n          </Switch>\n        </div>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}